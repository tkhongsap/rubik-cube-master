<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rubik's Cube Simulation (Add 6x6, 7x7)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <style>
        /* Base styles */
        body {
            margin: 0; overflow: hidden; font-family: 'Inter', sans-serif;
            background: linear-gradient(to bottom right, #f8fafc, #e2e8f0);
        }
        #container {
            position: absolute; top: 0; left: 0; width: 100vw; height: 100vh;
            display: block; z-index: 1;
        }
        /* Top Bar */
        #top-bar {
            position: absolute; top: 0; left: 0; width: 100%; padding: 0.75rem 1rem; /* Adjusted padding */
            background-color: rgba(255, 255, 255, 0.8); backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px); box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            z-index: 10; display: flex; justify-content: space-between; align-items: center;
        }
        #top-bar h1 { margin: 0; font-size: 1.125rem; font-weight: 600; color: #1e293b; }
        /* Cube Size Selector Styling */
        #cubeSizeSelector {
            padding: 0.3rem 0.6rem; border-radius: 6px; border: 1px solid #cbd5e1;
            background-color: white; font-size: 0.875rem; font-weight: 500; color: #334155;
            cursor: pointer; margin-left: 1rem; -webkit-appearance: none; appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%2364748b" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/></svg>');
            background-repeat: no-repeat; background-position: right 0.5rem center; background-size: 1em;
            padding-right: 2rem;
        }
         #cubeSizeSelector:focus { outline: none; box-shadow: 0 0 0 2px #f8fafc, 0 0 0 4px #64748b; }

        /* Controls */
        #controls {
            position: absolute; bottom: 30px; left: 50%; transform: translateX(-50%);
            display: flex; gap: 0.75rem; padding: 0.75rem;
            background-color: rgba(255, 255, 255, 0.75); backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px); border-radius: 0.75rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0,0,0,0.08);
            z-index: 10;
        }
        /* Buttons */
        button {
            padding: 0.6rem 1.2rem; border: none; border-radius: 0.375rem;
            font-weight: 500; font-size: 0.875rem; color: white; cursor: pointer;
            transition: background-color 0.15s ease-in-out, opacity 0.15s ease-in-out;
            outline: none;
        }
        button:focus-visible { box-shadow: 0 0 0 2px #f8fafc, 0 0 0 4px #64748b; }
        #scrambleButton { background-color: #0f172a; color: #f8fafc; }
        #scrambleButton:not(:disabled):hover { background-color: #1e293b; }
        #solveButton { background-color: #059669; color: #ecfdf5; }
        #solveButton:not(:disabled):hover { background-color: #047857; }
        button:disabled { opacity: 0.5; cursor: not-allowed; }

        /* Moves Display Panel */
        #moves-display {
            position: absolute; top: 75px; right: 20px; width: 180px;
            max-height: calc(100vh - 165px); padding: 10px;
            background-color: rgba(15, 23, 42, 0.85); border-radius: 8px;
            overflow-y: auto; z-index: 5;
            box-shadow: 0 0 15px rgba(50, 205, 50, 0.4); border: 1px solid rgba(50, 205, 50, 0.3);
        }
        .move-row { display: grid; grid-template-columns: repeat(4, 1fr); gap: 4px; margin-bottom: 2px; }
        .move-item { font-family: 'Monospace', monospace; font-size: 0.9rem; text-align: center; padding: 1px 3px; border-radius: 3px; white-space: nowrap; }
        .scramble-move { color: #34d399; }
        .solve-move { color: #60a5fa; }
        #moves-display::-webkit-scrollbar { display: none; }
        #moves-display { -ms-overflow-style: none; scrollbar-width: none; }

    </style>
</head>
<body>
    <div id="top-bar">
        <h1>Rubik's Cube Simulation</h1>
        <div>
             <label for="cubeSizeSelector" class="sr-only">Cube Size:</label>
             <select id="cubeSizeSelector">
                 <option value="3">3x3x3</option>
                 <option value="4">4x4x4</option>
                 <option value="5">5x5x5</option>
                 <option value="6">6x6x6</option> <option value="7">7x7x7</option> </select>
        </div>
    </div>
    <div id="container"></div>
    <div id="moves-display"></div>
    <div id="controls">
        <button id="scrambleButton">Scramble</button>
        <button id="solveButton">Solve</button>
    </div>

    <script>
        // --- Global Variables ---
        let scene, camera, renderer, controls;
        const cubeGroup = new THREE.Group();
        const cubieSize = 1; const spacing = 0.05; const totalCubieSize = cubieSize + spacing;
        let N = 3; let halfN = (N - 1) / 2;
        let isAnimating = false; const animationQueue = []; let scrambleHistory = [];
        const animationDuration = 300;
        const movesDisplayElement = document.getElementById('moves-display');
        const cubeSizeSelector = document.getElementById('cubeSizeSelector');

        // --- Move Display State ---
        let currentMoveRowElement = null; let movesInCurrentRow = 0; let currentSequenceType = null;

        const colors = { /* ... colors ... */
            right:  new THREE.Color(0x0000FF), left:   new THREE.Color(0x00FF00),
            top:    new THREE.Color(0xFFFFFF), bottom: new THREE.Color(0xFFFF00),
            front:  new THREE.Color(0xFF0000), back:   new THREE.Color(0xFFA500),
            inside: new THREE.Color(0x333333) };

        // --- Initialization ---
        function init() { /* ... init logic ... */
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, N * 1.5, N * 2.5); camera.lookAt(scene.position);

            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.getElementById('container').appendChild(renderer.domElement);

            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true; controls.dampingFactor = 0.05;
            controls.screenSpacePanning = false; controls.minDistance = 3;
            controls.maxDistance = N * 5; // Max distance scales with N

            const ambientLight = new THREE.AmbientLight(0xffffff, 0.7); scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
            directionalLight.position.set(N, N * 2, N * 1.5); scene.add(directionalLight); // Light position scales slightly

            cubeSizeSelector.addEventListener('change', (event) => {
                if (isAnimating) { event.target.value = N; return; } // Prevent change during animation
                const newSize = parseInt(event.target.value);
                if (newSize !== N) {
                    N = newSize; halfN = (N - 1) / 2; // Update N and halfN
                    console.log(`Changing cube size to ${N}x${N}x${N}`);
                    // Adjust camera and controls for new size
                    camera.position.z = N * 2.5; camera.position.y = N * 1.5;
                    controls.maxDistance = N * 5; controls.update();
                    createCube(); // Recreate the cube
                }
            });

            createCube(); scene.add(cubeGroup); // Initial cube

            document.getElementById('scrambleButton').addEventListener('click', scrambleCube);
            document.getElementById('solveButton').addEventListener('click', solveCubeAnimated);
            window.addEventListener('resize', onWindowResize, false);

            animate();
         }

        // --- Create Cube (Handles Variable Size N) ---
        function createCube() { /* ... create cube logic ... */
            console.log(`Creating ${N}x${N}x${N} cube...`);
            while(cubeGroup.children.length > 0){ cubeGroup.remove(cubeGroup.children[0]); }
            scrambleHistory = []; clearMovesDisplay();
            const geometry = new THREE.BoxGeometry(cubieSize, cubieSize, cubieSize);
            for (let x = 0; x < N; x++) { for (let y = 0; y < N; y++) { for (let z = 0; z < N; z++) {
                // Skip inner core pieces
                if (x > 0 && x < N - 1 && y > 0 && y < N - 1 && z > 0 && z < N - 1) continue;
                const materials = [ /* ... materials ... */
                    (x === N - 1) ? new THREE.MeshStandardMaterial({ color: colors.right }) : new THREE.MeshStandardMaterial({ color: colors.inside }),
                    (x === 0)     ? new THREE.MeshStandardMaterial({ color: colors.left })  : new THREE.MeshStandardMaterial({ color: colors.inside }),
                    (y === N - 1) ? new THREE.MeshStandardMaterial({ color: colors.top })   : new THREE.MeshStandardMaterial({ color: colors.inside }),
                    (y === 0)     ? new THREE.MeshStandardMaterial({ color: colors.bottom }): new THREE.MeshStandardMaterial({ color: colors.inside }),
                    (z === N - 1) ? new THREE.MeshStandardMaterial({ color: colors.front }) : new THREE.MeshStandardMaterial({ color: colors.inside }),
                    (z === 0)     ? new THREE.MeshStandardMaterial({ color: colors.back })  : new THREE.MeshStandardMaterial({ color: colors.inside })];
                const cubie = new THREE.Mesh(geometry, materials);
                // Position relative to center using halfN
                cubie.position.set((x - halfN) * totalCubieSize, (y - halfN) * totalCubieSize, (z - halfN) * totalCubieSize);
                // Store logical position (used for layer selection)
                cubie.userData.initialWorldPos = cubie.position.clone();
                cubeGroup.add(cubie);
            }}}
             console.log(`Cube created with ${cubeGroup.children.length} cubies.`);
             setButtonsEnabled(true);
        }

         // --- UI Control ---
         function setButtonsEnabled(enabled) { /* ... enable/disable buttons ... */
              document.getElementById('scrambleButton').disabled = !enabled;
              document.getElementById('solveButton').disabled = !enabled;
              cubeSizeSelector.disabled = !enabled; } // Also disable selector

        // --- Move Notation and Display (Handles Variable Size N) ---
        function getMoveNotation(axis, layerIndex, angle) { /* ... getMoveNotation logic ... */
              const prime = "'"; let face = '?'; let layerPrefix = ''; let clockwise = false;
              // Determine Face, Clockwise direction, and Layer Prefix based on axis, layerIndex, angle, N, halfN
              if (axis === 'x') { // R/L faces
                  if (layerIndex > halfN) { // Closer to R face (index N-1)
                      face = 'R'; clockwise = angle > 0;
                      if (layerIndex < N - 1) layerPrefix = (N - 1 - layerIndex + 1); // 2R, 3R...
                  } else { // Closer to L face (index 0)
                      face = 'L'; clockwise = angle < 0; // Clockwise for L is negative angle
                      if (layerIndex > 0) layerPrefix = (layerIndex + 1); // 2L, 3L...
                  }
              } else if (axis === 'y') { // U/D faces
                  if (layerIndex > halfN) { // Closer to U face (index N-1)
                      face = 'U'; clockwise = angle < 0; // Clockwise for U is negative angle
                      if (layerIndex < N - 1) layerPrefix = (N - 1 - layerIndex + 1); // 2U, 3U...
                  } else { // Closer to D face (index 0)
                      face = 'D'; clockwise = angle > 0;
                      if (layerIndex > 0) layerPrefix = (layerIndex + 1); // 2D, 3D...
                  }
              } else if (axis === 'z') { // F/B faces
                  if (layerIndex > halfN) { // Closer to F face (index N-1)
                      face = 'F'; clockwise = angle > 0;
                      if (layerIndex < N - 1) layerPrefix = (N - 1 - layerIndex + 1); // 2F, 3F...
                  } else { // Closer to B face (index 0)
                      face = 'B'; clockwise = angle < 0; // Clockwise for B is negative angle
                      if (layerIndex > 0) layerPrefix = (layerIndex + 1); // 2B, 3B...
                  }
              }
              // Return formatted notation
              return layerPrefix + face + (clockwise ? '' : prime);
          }

        function addMoveToDisplay(notation, moveType) { /* ... addMoveToDisplay logic ... */
                if (!movesDisplayElement) return;
                if (currentMoveRowElement === null || movesInCurrentRow >= 4) {
                    currentMoveRowElement = document.createElement('div'); currentMoveRowElement.className = 'move-row';
                    movesDisplayElement.appendChild(currentMoveRowElement); movesInCurrentRow = 0;
                }
                const moveElement = document.createElement('span'); moveElement.textContent = notation;
                moveElement.className = 'move-item ' + (moveType === 'scramble' ? 'scramble-move' : 'solve-move');
                currentMoveRowElement.appendChild(moveElement); movesInCurrentRow++;
                movesDisplayElement.scrollTop = movesDisplayElement.scrollHeight;
          }

        function clearMovesDisplay() { /* ... clearMovesDisplay logic ... */
                 if (!movesDisplayElement) return; movesDisplayElement.innerHTML = '';
                 currentMoveRowElement = null; movesInCurrentRow = 0; }

        // --- Cube Operations (Handles Variable Size N) ---
        function getLayer(axis, layerIndex) { /* ... get layer logic ... */
               const layer = []; const threshold = totalCubieSize * (layerIndex - halfN); const tolerance = 0.1;
               cubeGroup.children.forEach(cubie => {
                   if (Math.abs(cubie.userData.initialWorldPos[axis] - threshold) < tolerance) {
                       layer.push(cubie);
                   }
               });
               return layer;
           }

        // --- Animation Queue Processing ---
        function processAnimationQueue() { /* ... processAnimationQueue logic ... */
                if (isAnimating || animationQueue.length === 0) {
                    if (!isAnimating && animationQueue.length === 0) { setButtonsEnabled(true); console.log("Animation queue complete."); currentSequenceType = null; } return;
                }
                isAnimating = true; setButtonsEnabled(false);
                const move = animationQueue.shift();
                const notation = getMoveNotation(move.axis, move.layerIndex, move.angle);
                addMoveToDisplay(notation, currentSequenceType);
                animateLayerRotation(move.axis, move.layerIndex, move.angle);
            }

        // --- Animate the rotation of a layer (Using robust logical position update) ---
        function animateLayerRotation(axis, layerIndex, angle) { /* ... animation logic with fix ... */
             const layer = getLayer(axis, layerIndex);
             if (layer.length === 0) { console.warn(`Layer selection failed for axis ${axis}, index ${layerIndex}. Skipping move.`); isAnimating = false; processAnimationQueue(); return; }
             const pivot = new THREE.Object3D(); scene.add(pivot);
             layer.forEach(cubie => { pivot.attach(cubie); });

             const targetRotation = {}; targetRotation[axis] = angle;
             const tween = new TWEEN.Tween(pivot.rotation)
                 .to(targetRotation, animationDuration).easing(TWEEN.Easing.Quadratic.InOut)
                 .onComplete(() => {
                     const currentHalfN = (N - 1) / 2; // Use N applicable at end of move
                     layer.forEach(cubie => {
                         cubeGroup.attach(cubie); // Detach cubie

                         // Update userData.initialWorldPos based on final position (robustly)
                         const logicalX = Math.round(cubie.position.x / totalCubieSize + currentHalfN);
                         const logicalY = Math.round(cubie.position.y / totalCubieSize + currentHalfN);
                         const logicalZ = Math.round(cubie.position.z / totalCubieSize + currentHalfN);
                         const clampedX = Math.max(0, Math.min(N - 1, logicalX));
                         const clampedY = Math.max(0, Math.min(N - 1, logicalY));
                         const clampedZ = Math.max(0, Math.min(N - 1, logicalZ));
                         cubie.userData.initialWorldPos.set( (clampedX - currentHalfN) * totalCubieSize, (clampedY - currentHalfN) * totalCubieSize, (clampedZ - currentHalfN) * totalCubieSize );

                         snapRotation(cubie); // Snap visual rotation
                     });
                     scene.remove(pivot); isAnimating = false; processAnimationQueue();
                 }).start();
         }


        // Helper to snap rotation
        function snapRotation(object) { /* ... snap rotation logic ... */
                 const euler = new THREE.Euler().setFromQuaternion(object.quaternion, 'XYZ');
                 euler.x = Math.round(euler.x / (Math.PI / 2)) * (Math.PI / 2); euler.y = Math.round(euler.y / (Math.PI / 2)) * (Math.PI / 2); euler.z = Math.round(euler.z / (Math.PI / 2)) * (Math.PI / 2);
                 object.quaternion.setFromEuler(euler); }

        // Scramble the cube (Handles Variable Size N)
        function scrambleCube() { /* ... scramble logic ... */
               if (isAnimating) return; console.log("Queueing scramble moves..."); setButtonsEnabled(false);
               currentSequenceType = 'scramble'; const moves = ['x', 'y', 'z'];
               const layers = Array.from({ length: N }, (_, i) => i); const angles = [Math.PI / 2, -Math.PI / 2];
               const numScrambleMoves = N * N; // Scramble length scales with N^2
               for (let i = 0; i < numScrambleMoves; i++) {
                   const randomAxis = moves[Math.floor(Math.random() * moves.length)];
                   const randomLayer = layers[Math.floor(Math.random() * layers.length)];
                   const randomAngle = angles[Math.floor(Math.random() * angles.length)];
                   const move = { axis: randomAxis, layerIndex: randomLayer, angle: randomAngle };
                   animationQueue.push(move); scrambleHistory.push(move);
               }
               console.log(`Added ${numScrambleMoves} moves to queue. Total history: ${scrambleHistory.length}`); processAnimationQueue();
           }

        // Solve the cube
        function solveCubeAnimated() { /* ... solve logic ... */
                 if (isAnimating || scrambleHistory.length === 0) return; console.log("Queueing solve moves (reversing scramble)..."); setButtonsEnabled(false);
                 currentSequenceType = 'solve';
                 const solveMoves = scrambleHistory.slice().reverse().map(move => ({ axis: move.axis, layerIndex: move.layerIndex, angle: -move.angle }));
                 animationQueue.push(...solveMoves); scrambleHistory = [];
                 console.log(`Added ${solveMoves.length} solve moves to queue.`); processAnimationQueue();
           }

        // --- Animation Loop ---
        function animate(time) { /* ... animation loop ... */
                requestAnimationFrame(animate); TWEEN.update(time); controls.update(); renderer.render(scene, camera); }

        // --- Event Handlers ---
        function onWindowResize() { /* ... resize handler ... */
                 camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix();
                 renderer.setSize(window.innerWidth, window.innerHeight); }

        // --- Start ---
        init();

    </script>
</body>
</html>
